labs(title = i,
x = "Spot",
y = "Proportion")
print(p)
}
tmp_mse <- subset(pred_true_long,
lossfn == "MSE" & optimizer == "Adam" &
batch_size == "32" & learning_rate == "0.0001" &
dropout_rate == "0.5" & dense_layer_size == "512")
tmp_msle <- subset(pred_true_long,
lossfn == "MSLE" & optimizer == "Adam" &
batch_size == "64" & learning_rate == "0.0001" &
dropout_rate == "0.2" & dense_layer_size == "512")
ggplot(tmp_mse, aes(x = proportion.obs, y = proportion.pred)) +
geom_point(col = transparent("black", trans.val = .8), size = 0.5) +
geom_smooth(method="loess", se=F, aes(color = "red"), size = 0.5) +
geom_smooth(method="lm", se=F, aes(color = "blue"), size = 0.5) +
scale_color_identity(name = NULL,
breaks = c("red", "blue"),
labels = c("Loess", "OLS"),
guide = "legend") +
labs(title="Loss function = MSE, Optimizer = Adam, Batch size = 32, Learning rate = 0.0001, Dropout proportion = 0.5, Dense layer units = 512",
x="Observed Proportion",
y="Predicted Proportion") +
theme(plot.title = element_text(size=17),
strip.text.x = element_text(size=13),
legend.position="bottom", legend.box = "horizontal",
legend.key.size = unit(1, 'cm'), legend.title = element_blank(),
legend.text = element_text(size=15), axis.title.x = element_text(size=15),
axis.title.y= element_text(size=15),
axis.text = element_text(size=13)) +
scale_y_continuous(limits = c(0,1)) +
scale_x_continuous(limits = c(0,1)) +
facet_wrap(~celltype, nrow = 3, scales = "free")
tmp_2 <- reshape(
tmp_mse,
direction =  "long",
varying = c("proportion.pred", "proportion.obs"),
timevar = "type",
times = c("pred", "obs"),
v.names = c("proportion"),
idvar = colnames(tmp_mse)[1:9]
)
rownames(tmp_2) <- NULL
X_order = unlist(unique(tmp_2[tmp_2$type == "obs" & tmp_2$celltype == "Cancer.Epithelial","X"]))
tmp_2$X <- factor(tmp_2$X, levels=X_order)
ggplot(tmp_2, aes(fill=factor(celltype, levels = unique(tmp_2$celltype)), y=proportion, x=X)) +
geom_bar(position="stack", stat="identity", width = 1) +
ggh4x::facet_grid2(~type, scales = "free_x", independent = "x",
labeller = labeller(type = c("obs" = "Observed (deconvoluted)",
"pred" = "Predicted"))) +
theme(strip.text.x = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual("Cell type",
values=colors) +
labs(title = "Loss Function: MSE",
x = "Spot",
y = "Proportion")
for (i in celltypes) {
tmp <- tmp_2[tmp_2$celltype ==i, ]
ordered <- tmp[tmp$type == "obs", ] %>%
arrange(proportion)
X_order = unlist(ordered$X)
tmp$X <- factor(tmp$X, levels=X_order)
p <- ggplot(tmp,
aes(fill=factor(celltype, levels = unique(tmp_2$celltype)), y=proportion, x=X)) +
geom_bar(position="stack", stat="identity", width = 1) +
ggh4x::facet_grid2(~type, scales = "free_x", independent = "x",
labeller = labeller(type = c("obs" = "Observed (deconvoluted)",
"pred" = "Predicted"))) +
theme(strip.text.x = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "none") +
scale_fill_manual("Cell type",
values=colors) +
labs(title = i,
x = "Spot",
y = "Proportion")
print(p)
}
mu <- tmp_2 %>%
group_by(celltype, type) %>%
summarise_at(vars("proportion"), mean)
mu$measure <- "mean"
med <- tmp_2 %>%
group_by(celltype, type) %>%
summarise_at(vars("proportion"), median)
med$measure <- "median"
measure <- rbind(mu, med)
tmp_2 <- reshape(
tmp_msle,
direction =  "long",
varying = c("proportion.pred", "proportion.obs"),
timevar = "type",
times = c("pred", "obs"),
v.names = c("proportion"),
idvar = colnames(tmp_mse)[1:9]
)
rownames(tmp_2) <- NULL
X_order = unlist(unique(tmp_2[tmp_2$type == "obs" & tmp_2$celltype == "Cancer.Epithelial","X"]))
tmp_2$X <- factor(tmp_2$X, levels=X_order)
tmp_msle <- subset(pred_true_long,
lossfn == "MSLE" & optimizer == "Adam" &
batch_size == "64" & learning_rate == "0.0001" &
dropout_rate == "0.2" & dense_layer_size == "512")
ggplot(tmp_mse, aes(x = proportion.obs, y = proportion.pred)) +
geom_point(col = transparent("black", trans.val = .8), size = 0.5) +
geom_smooth(method="loess", se=F, aes(color = "red"), size = 0.5) +
geom_smooth(method="lm", se=F, aes(color = "blue"), size = 0.5) +
scale_color_identity(name = NULL,
breaks = c("red", "blue"),
labels = c("Loess", "OLS"),
guide = "legend") +
labs(title="Loss function = MSE, Optimizer = Adam, Batch size = 32, Learning rate = 0.0001, Dropout proportion = 0.5, Dense layer units = 512",
x="Observed Proportion",
y="Predicted Proportion") +
theme(plot.title = element_text(size=17),
strip.text.x = element_text(size=13),
legend.position="bottom", legend.box = "horizontal",
legend.key.size = unit(1, 'cm'), legend.title = element_blank(),
legend.text = element_text(size=15), axis.title.x = element_text(size=15),
axis.title.y= element_text(size=15),
axis.text = element_text(size=13)) +
scale_y_continuous(limits = c(0,1)) +
scale_x_continuous(limits = c(0,1)) +
facet_wrap(~celltype, nrow = 3, scales = "free")
ggplot(tmp_msle, aes(x = proportion.obs, y = proportion.pred)) +
geom_point(col = transparent("black", trans.val = .8), size = 0.5) +
geom_smooth(method="loess", se=F, aes(color = "red"), size = 0.5) +
geom_smooth(method="lm", se=F, aes(color = "blue"), size = 0.5) +
scale_color_identity(name = NULL,
breaks = c("red", "blue"),
labels = c("Loess", "OLS"),
guide = "legend") +
labs(title="Loss function = MSLE, Optimizer = Adam, Batch size = 64, Learning rate = 0.0001, Dropout proportion = 0.2, Dense layer units = 512",
x="Observed Proportion",
y="Predicted Proportion") +
theme(plot.title = element_text(size=17),
strip.text.x = element_text(size=13),
legend.position="bottom", legend.box = "horizontal",
legend.key.size = unit(1, 'cm'), legend.title = element_blank(),
legend.text = element_text(size=15), axis.title.x = element_text(size=15),
axis.title.y= element_text(size=15),
axis.text = element_text(size=13)) +
scale_y_continuous(limits = c(0,1)) +
scale_x_continuous(limits = c(0,1)) +
facet_wrap(~celltype, nrow = 3, scales = "free")
tmp_2 <- reshape(
tmp_msle,
direction =  "long",
varying = c("proportion.pred", "proportion.obs"),
timevar = "type",
times = c("pred", "obs"),
v.names = c("proportion"),
idvar = colnames(tmp_mse)[1:9]
)
rownames(tmp_2) <- NULL
X_order = unlist(unique(tmp_2[tmp_2$type == "obs" & tmp_2$celltype == "Cancer.Epithelial","X"]))
tmp_2$X <- factor(tmp_2$X, levels=X_order)
ggplot(tmp_2, aes(fill=factor(celltype, levels = unique(tmp_2$celltype)), y=proportion, x=X)) +
geom_bar(position="stack", stat="identity", width = 1) +
ggh4x::facet_grid2(~type, scales = "free_x", independent = "x",
labeller = labeller(type = c("obs" = "Observed (deconvoluted)",
"pred" = "Predicted"))) +
theme(strip.text.x = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom") +
scale_fill_manual("Cell type",
values=colors) +
labs(title = "Loss Function: MSLE",
x = "Spot",
y = "Proportion")
for (i in celltypes) {
tmp <- tmp_2[tmp_2$celltype ==i, ]
ordered <- tmp[tmp$type == "obs", ] %>%
arrange(proportion)
X_order = unlist(ordered$X)
tmp$X <- factor(tmp$X, levels=X_order)
p <- ggplot(tmp,
aes(fill=factor(celltype, levels = unique(tmp_2$celltype)), y=proportion, x=X)) +
geom_bar(position="stack", stat="identity", width = 1) +
ggh4x::facet_grid2(~type, scales = "free_x", independent = "x",
labeller = labeller(type = c("obs" = "Observed (deconvoluted)",
"pred" = "Predicted"))) +
theme(strip.text.x = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "none") +
scale_fill_manual("Cell type",
values=colors) +
labs(title = i,
x = "Spot",
y = "Proportion")
print(p)
}
mu <- tmp_2 %>%
group_by(celltype, type) %>%
summarise_at(vars("proportion"), mean)
mu$measure <- "mean"
med <- tmp_2 %>%
group_by(celltype, type) %>%
summarise_at(vars("proportion"), median)
med$measure <- "median"
ggplot(tmp_2, aes(x = proportion, color = type)) +
geom_histogram(fill = "white", alpha = 0.05, position = "dodge", binwidth=0.01) +
geom_vline(data=measure, aes(xintercept=proportion, color=type, linetype = measure))+
scale_x_continuous(limits = c(0,1)) +
scale_colour_discrete("Proportion", breaks=c("obs", "pred"),
labels=c("Observed (from CARD)",
"Predicted (from trained network)")) +
scale_linetype_discrete("Measure", breaks=c("mean", "median"),
labels = c("Mean", "Median")) +
labs(title="Image = Original, Optimizer = Adam, Batch size = 32, Learning rate = 0.0001,\nDropout proportion = 0.5, Dense layer units = 512",
x="Proportion",
y = "Count") +
theme(plot.title = element_text(size=16),
strip.text.x = element_text(size=13),
legend.position="top", legend.box = "horizontal",
legend.key.size = unit(1, 'cm'), legend.title = element_text(size=15),
legend.text = element_text(size=15), axis.title.x = element_text(size=17),
axis.title.y= element_text(size=15),
axis.text = element_text(size=13)) +
facet_wrap(~celltype, nrow = 3, scales = "free")
major_patho <- data.frame(X = major_obs$X,
invasive.cancer.obs = major_obs$Cancer.Epithelial.obs,
stroma.obs = major_obs$Endothelial.obs + major_obs$PVL.obs + major_obs$CAFs.obs,
lymphocytes.obs = major_obs$B.cells.obs + major_obs$T.cells.obs + major_obs$Plasmablasts.obs,
others.obs = major_obs$Myeloid.obs + major_obs$Normal.Epithelial.obs)
pred_patho <- data.frame(invasive.cancer.pred = pred$Cancer.Epithelial,
stroma.pred = pred$Endothelial + pred$PVL + pred$CAFs,
lymphocytes.pred =  pred$T.cells + pred$B.cells + pred$Plasmablasts,
others.pred = pred$Myeloid + pred$Normal.Epithelial)
pred_patho <- cbind(pred[,c(1:7)], pred_patho)
pred_true_patho <- merge(pred_patho, major_patho, by = "X")
pred_patho
major_patho <- data.frame(X = major_obs$X,
invasive.cancer.obs = major_obs$Cancer.Epithelial.obs,
stroma.obs = major_obs$Endothelial.obs + major_obs$PVL.obs + major_obs$CAFs.obs,
lymphocytes.obs = major_obs$B.cells.obs + major_obs$T.cells.obs + major_obs$Plasmablasts.obs,
others.obs = major_obs$Myeloid.obs + major_obs$Normal.Epithelial.obs)
pred_patho <- data.frame(invasive.cancer.pred = pred$Cancer.Epithelial,
stroma.pred = pred$Endothelial + pred$PVL + pred$CAFs,
lymphocytes.pred =  pred$T.cells + pred$B.cells + pred$Plasmablasts,
others.pred = pred$Myeloid + pred$Normal.Epithelial)
pred_patho <- cbind(pred[,c(1:8)], pred_patho)
pred_true_patho <- merge(pred_patho, major_patho, by = "X")
pred_true_patho_long <- reshape(pred_true_patho, direction =  "long",
varying = list(c("invasive.cancer.obs",
"stroma.obs",
"lymphocytes.obs",
"others.obs"),
c("invasive.cancer.pred",
"stroma.pred",
"lymphocytes.pred",
"others.pred")),
timevar = "pathology",
times = c("invasive.cancer", "stroma", "lymphocytes", "others"),
v.names = c("proportion.obs", "proportion.pred"),
idvar = colnames(pred_true_patho)[1:8])
rownames(pred_true_patho_long) <- NULL
pred_true_patho_long
batch = unique(pred_true_patho_long$batch_size)[i]
for (i in 1:length(unique(pred_true_patho_long$batch_size))) {
for(k in 1:length(unique(pred_true_patho_long$dropout_rate))){
for(l in 1:length(unique(pred_true_patho_long$dense_layer_size))){
batch = unique(pred_true_patho_long$batch_size)[i]
drop = unique(pred_true_patho_long$dropout_rate)[k]
dense = unique(pred_true_patho_long$dense_layer_size)[l]
title = str_c(c("Optimizer = Adam", "Learning rate = 0.01",
paste("Batch size =", batch),
paste("Dropout proportion =", drop),
paste("Dense layer units =", dense)),
collapse = ", ")
df = subset(pred_true_patho_long,
optimizer == "Adam" &
batch_size == batch & learning_rate == "0.01" &
dropout_rate == drop & dense_layer_size == dense)
if(nrow(df) == 0){
next
}
p <- ggplot(df[df$lossfn == "MSE", ],
aes(x = proportion.obs, y = proportion.pred)) +
geom_point(col = transparent("black", trans.val = .8), size = 0.5) +
geom_smooth(method="loess", se=F, aes(color = "red"), size = 0.5) +
geom_smooth(method="lm", se=F, aes(color = "blue"), size = 0.5) +
scale_color_identity(name = NULL,
breaks = c("red", "blue"),
labels = c("Loess", "OLS"),
guide = "legend") +
scale_y_continuous(limits = c(-0.00005,1.00005)) +
scale_x_continuous(limits = c(-0.00005,1.00005)) +
labs(title=title,
x="Deconvoluted Proportion",
y="Predicted Proportion") +
theme(plot.title = element_text(size=10),
legend.position="bottom", legend.box = "horizontal",
legend.title = element_blank(),
legend.text = element_text(size=8), axis.title.x = element_text(size=8),
axis.title.y= element_text(size=8)) +
facet_wrap(~pathology, nrow = 1, scales = "free")
print(p)
}
}
}
library(rethinking)
library(qgraph)
library(tidyverse)
library(rstan)
library(ggpubr)
rm(list = ls())
load('../output/model_iF_0522.RData')
setwd("~/GitHub/children_behavior_multinomial_analysis/code")
load('../output/model_iF_0522.RData')
post_iF <- extract.samples(mfit_iF)
View(post_iF)
stan_scat(mfit_iF, pars = c("a", "bA"), color = "blue", size = 4))
stan_scat(mfit_iF, pars = c("a", "bA"), color = "blue", size = 4)
View(post_iF)
stan_scat(mfit_iF, pars = c("bB", "bA"), color = "blue", size = 4)
p1 <- stan_plot(mfit_iF, point_est = "median", pars = c("bA","bB"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p1
stan_plot(mfit_iF, point_est = "median", pars = c("bA","bB"), show_density = TRUE, fill_color = "maroon")
View(post_iF)
p1 <- stan_plot(mfit_iF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p1
stan_plot(mfit_iF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ihF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ihF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
load('../output/model_ihF_0522.RData')
p2 <- stan_plot(mfit_ihF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p2
tiff("../output/figure/posterior_fixeff.tiff", units="in", width=6, height=6, res=300)
p1 <- stan_plot(mfit_iF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ihF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
plot<- ggarrange(p1,p2, ncol=2, nrow=1)
annotate_figure(plot, top = text_grob("Kernel Density Estimates of Coefficients for Fixed Effects",
color = "black", face = "bold", size = 9))
dev.off()
p1 <- stan_plot(mfit_iF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, fill_color = "maroon",  alpha = 0.3) +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p1
p1 <- stan_plot(mfit_iF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, fill_color = "maroon", size=1) +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p1
p1 <- stan_plot(mfit_iF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, fill_color = "maroon", size=0.1) +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p1
tiff("../output/figure/posterior_fixeff.tiff", units="in", width=6, height=8, res=300)
p1 <- stan_plot(mfit_iF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ihF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
plot<- ggarrange(p1,p2, ncol=2, nrow=1)
annotate_figure(plot, top = text_grob("Kernel Density Estimates of Coefficients for Fixed Effects",
color = "black", face = "bold", size = 9))
dev.off()
traceplot(mfit_iF)
check_hmc_diagnostics(mfit_iF)
Rhat(mfit_iF)
########## load output RData ######
load('../output/model_i_0522.RData')
load('../output/model_ih_0522.RData')
######################## HMC Diagnostics #######################################
check_hmc_diagnostics(mfit_i)
check_hmc_diagnostics(mfit_ih)
check_hmc_diagnostics(mfit_iF)
check_hmc_diagnostics(mfit_ihF)
tiff("../output/figure/posterior_intercepts.tiff", units="in", width=6, height=6, res=300)
p1 <- stan_plot(mfit_i, point_est = "median", pars = "a", show_density = TRUE, ci_level = 0.95, fill_color = "maroon") +
labs(subtitle = "mfit_i") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ih, point_est = "median", pars = "a", show_density = TRUE, ci_level = 0.95, fill_color = "maroon") +
labs(subtitle = "mfit_ih") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p3 <- stan_plot(mfit_iF, point_est = "median", pars = "a", show_density = TRUE, ci_level = 0.95, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p4 <- stan_plot(mfit_ihF, point_est = "median", pars = "a", show_density = TRUE, ci_level = 0.95, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
plot<- ggarrange(p1,p2,p3,p4, ncol=2, nrow=2)
annotate_figure(plot, top = text_grob("Posterior Intercepts",
color = "black", face = "bold", size = 9))
dev.off()
tiff("../output/figure/posterior_fixeff.tiff", units="in", width=6, height=8, res=300)
p1 <- stan_plot(mfit_iF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, ci_level = 0.95, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ihF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, ci_level = 0.95, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
plot<- ggarrange(p1,p2, ncol=2, nrow=1)
annotate_figure(plot, top = text_grob("Posterior Coefficients for Fixed Effects",
color = "black", face = "bold", size = 9))
dev.off()
tiff("../output/figure/posterior_intercepts.tiff", units="in", width=6, height=6, res=300)
p1 <- stan_plot(mfit_i, point_est = "median", pars = "a", show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_i") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ih, point_est = "median", pars = "a", show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ih") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p3 <- stan_plot(mfit_iF, point_est = "median", pars = "a", show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
p4 <- stan_plot(mfit_ihF, point_est = "median", pars = "a", show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 7),
axis.text.x = element_text(size = 7))
plot<- ggarrange(p1,p2,p3,p4, ncol=2, nrow=2)
annotate_figure(plot, top = text_grob("Posterior Intercepts",
color = "black", face = "bold", size = 9))
dev.off()
tiff("../output/figure/posterior_fixeff.tiff", units="in", width=6, height=8, res=300)
p1 <- stan_plot(mfit_iF, point_est = "median",
pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"),
show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_iF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
p2 <- stan_plot(mfit_ihF, point_est = "median", pars = c("bA","bB", "bI", "bR", "bAI", "bBR", "bH"), show_density = TRUE, fill_color = "maroon") +
labs(subtitle = "mfit_ihF") +
theme(plot.subtitle = element_text(size = 8, hjust = 0.5),
axis.text.y = element_text(size = 3),
axis.text.x = element_text(size = 7))
plot<- ggarrange(p1,p2, ncol=2, nrow=1)
annotate_figure(plot, top = text_grob("Posterior Coefficients for Fixed Effects",
color = "black", face = "bold", size = 9))
dev.off()
